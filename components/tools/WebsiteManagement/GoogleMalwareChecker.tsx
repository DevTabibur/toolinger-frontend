"use client";

import { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import { ChevronRight, Home, Shield, Loader2 } from "lucide-react";
import Link from "next/link";
import { googleMalwareChecker } from "@/app/api/AllTools";
import toast from "react-hot-toast";


export default function GoogleMalwareChecker(props: { article?: any, seo?: any }) {
    const { article, seo } = props;
    const [submittedUrl, setSubmittedUrl] = useState<string | null>(null);
    const [malwareResult, setMalwareResult] = useState<any | null>(null);
    const [loading, setLoading] = useState(false);

    // Open reportUrl in a new tab if present and is a valid URL
    const openReportUrlIfPresent = (reportUrl: string | undefined) => {
        if (reportUrl && typeof window !== "undefined") {
            try {
                // Validate it's a URL
                const url = new URL(reportUrl);
                window.open(url.toString(), "_blank", "noopener,noreferrer");
            } catch (e) {
                // Not a valid URL, do nothing
            }
        }
    };

    const handleSubmit = async (
        values: { url: string },
        { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }
    ) => {
        setLoading(true);
        setMalwareResult(null);
        setSubmittedUrl(values.url);
        try {
            const res = await googleMalwareChecker({ url: values.url });
            setMalwareResult(res?.data);
            if (res?.data?.reportUrl) {
                openReportUrlIfPresent(res.data.reportUrl);
            }
        } catch (error) {
            setMalwareResult({ error: (error as Error).message });
            toast.error("Unknown error occurred. Please try again.");
        } finally {
            setLoading(false);
            setSubmitting(false);
        }
    };

   
  

    return (
        <>
           
            {/* Breadcrumb */}
            <div className="container mx-auto px-4 py-4">
                <nav className="flex items-center space-x-2 text-sm">
                    <Link
                        href="/"
                        className="text-muted-foreground hover:text-primary flex items-center"
                    >
                        <Home className="h-4 w-4 mr-1" />
                        Home
                    </Link>
                    <ChevronRight className="h-4 w-4 text-muted-foreground" />
                    <Link
                        href="/category/website-management"
                        className="text-muted-foreground hover:text-primary"
                    >
                        Website Management
                    </Link>
                    <ChevronRight className="h-4 w-4 text-muted-foreground" />
                    <span className="text-foreground font-medium">
                    Google Malware Checker
                    </span>
                </nav>
            </div>

            <div className="container mx-auto p-4">
                <div className="grid grid-cols-1 md:grid-cols-12 gap-6 mb-8">
                    {/* First column: col-span-7 on md+ */}
                    <div className="md:col-span-7 col-span-1 ">
                        <h2 className="text-2xl font-bold text-center mb-2">
                        Google Malware Checker
                        </h2>
                        <p className="text-center text-muted-foreground mb-6 text-sm">
                        To use Toolinger Google Malware Checker, Paste Url in the input box given below and click on check malware Button.
                        </p>
                        <Formik
                            initialValues={{ url: "" }}
                            validationSchema={Yup.object({
                                url: Yup.string()
                                    .url("Enter a valid URL (including https://)")
                                    .required("URL is required"),
                            })}
                            onSubmit={handleSubmit}
                        >
                            {({ isSubmitting, touched, errors }) => (
                                <Form>
                                    <div className="bg-muted dark:bg-cyan-100 rounded flex items-center px-0 py-4 mb-6">
                                        <div className="flex items-center justify-center h-full px-4">
                                            <span className="bg-primary rounded w-8 h-8 flex items-center justify-center">
                                                <Shield className="text-white w-5 h-5" />
                                            </span>
                                        </div>
                                        <div className="flex-1">
                                            <Field
                                                name="url"
                                                type="url"
                                                placeholder="https://example.com/"
                                                className={`w-full bg-transparent  outline-none border-0 focus:ring-0 text-base px-2 py-2 ${errors.url && touched.url
                                                    ? "text-destructive"
                                                    : "text-foreground"
                                                    }`}
                                            />
                                        </div>
                                    </div>
                                    <ErrorMessage
                                        name="url"
                                        component="div"
                                        className="text-destructive text-xs mb-2 text-center"
                                    />
                                    <div className="flex justify-center">
                                        <button
                                            type="submit"
                                            disabled={isSubmitting || loading}
                                            className="bg-emerald-500 hover:bg-emerald-600 text-white font-medium px-8 py-2 rounded transition-colors focus:outline-none focus:ring-2 focus:ring-emerald-400 flex items-center justify-center"
                                        >
                                            {loading && (
                                                <Loader2 className="animate-spin w-5 h-5 mr-2" />
                                            )}
                                            Check Malware
                                        </button>
                                    </div>
                                </Form>
                            )}
                        </Formik>
                        {/* Optionally show submitted URL */}
                        {submittedUrl && (
                            <div className="mt-6 text-center text-sm text-muted-foreground">
                                <span>
                                    Submitted URL: <span className="font-medium">{submittedUrl}</span>
                                </span>
                            </div>
                        )}
                    </div>
                    {/* Second column: col-span-5 on md+ */}
                    <div className="md:col-span-5 col-span-1 ">
                        {/* You can place content for the second column here */}
                        {/* Advertiesment */}
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-12 gap-6 mb-8">
                    {/* First column: col-span-6 on md+ */}
                    <div className="md:col-span-6 col-span-1 ">
                        {/* Advertiesment */}
                    </div>
                    {/* Second column: col-span-6 on md+ */}
                    <div className="md:col-span-6 col-span-1 ">
                        {/* Advertiesment */}
                    </div>
                </div>
            </div>

           
        </>
    );
}
